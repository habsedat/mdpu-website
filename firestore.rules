rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             request.auth.token.get('role', '') == 'admin';
    }
    
    function isAdminClaim() {
      return isAuthenticated() && 
             (request.auth.token.get('role', '') == 'admin' || 
              request.auth.token.get('role', '') == 'superadmin' ||
              request.auth.uid == 'cE2LxjTCDTWDxesSYHtLN9sTnpn1' || // Your specific UID
              request.auth.uid == 'Mariatu kabia'); // Alternative identifier if needed
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && 
             request.auth.token.get('role', '') == 'superadmin';
    }
    
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }
    
    // Members collection - public read, members can update their own profile
    match /members/{document} {
      allow read: if true;
      allow write: if isAdminClaim() || 
                      (isAuthenticated() && 
                       (resource.data.uid == request.auth.uid || 
                        resource.data.email == request.auth.token.email ||
                        document == request.auth.uid));
    }
    
    match /projects/{document} {
      allow read: if true;
      allow write: if isAdminClaim();
    }
    
    match /events/{document} {
      allow read: if true;
      allow write: if isAdminClaim();
    }
    
    // Applications - users can create, admins can read/write all
    match /applications/{document} {
      allow create: if true; // Allow public application submissions
      allow read: if isAdminClaim() || isOwner(resource.data.uid);
      allow update, delete: if isAdminClaim() || isOwner(resource.data.uid);
    }
    
    // Profiles - private, only owner and admins can access
    match /profiles/{uid} {
      allow read, write: if isOwner(uid) || isAdminClaim();
      allow create, delete: if isAdminClaim();
    }
    
    // Payments - readable by owner or admin, no client writes
    match /payments/{document} {
      allow read: if isAdminClaim() || 
                     (isAuthenticated() && 
                      (resource.data.uid == request.auth.uid || 
                       resource.data.email == request.auth.token.email));
      allow write: if false; // Only server/webhooks can write
    }
    
    // Reports - admin only (temporarily more permissive)
    match /reports/{document=**} {
      allow read: if isAuthenticated(); // Temporarily allow any authenticated user
      allow write: if false; // Only server functions can write
    }
    
    // Media metadata
    match /media/{document} {
      allow read: if true;
      allow write: if isAdminClaim();
    }
    
    // Roles collection - source of truth for admin roles
    match /roles/{uid} {
      allow read: if isAdminClaim() || isOwner(uid);
      allow write: if false; // Only callable functions can write
    }
    
    // Admin invites collection - superadmin readable, functions writable
    match /adminInvites/{inviteId} {
      allow read: if isSuperAdmin();
      allow write: if false; // Only callable functions can write
    }
    
    // Admin audit log - superadmin readable only
    match /adminAudit/{logId} {
      allow read: if isSuperAdmin();
      allow write: if false; // Only callable functions can write
    }
    
    // Documents collection - public read, admin write
    match /documents/{document} {
      allow read: if true; // Public can read documents
      allow write: if isAdminClaim(); // Only admins can upload/manage documents
    }
    
    // Leadership collection - public read, admin write
    match /leadership/{document} {
      allow read: if true; // Public can read leadership assignments
      allow write: if isAdminClaim(); // Only admins can manage leadership
    }
    
    // News collection - public read for published, admin write
    match /news/{document} {
      allow read: if true; // Public can read all news (filtering done client-side)
      allow write: if isAuthenticated(); // Temporarily allow any authenticated user for debugging
    }
    
    // Settings collection - public read, admin write
    match /settings/{document} {
      allow read: if true; // Public can read settings (like contact info)
      allow write: if isAdminClaim(); // Only admins can update settings
    }
  }
}

